{"version":3,"sources":["components/Badge/Badge.js","components/Bio/Bio.js","components/BioPane/BioPane.js","components/ProjectCard/ProjectCard.js","components/CardAlbum/CardAlbum.js","components/ProjectsPane/ProjectsPane.js","App.js","serviceWorker.js","index.js"],"names":["Badge","props","react_default","a","createElement","Pane","className","Avatar","src","img","name","size","Heading","color","align","organizationRole","organization","typography","href","email","Bio","newText","bio","split","map","item","i","key","components_Badge_Badge","BioPane","components_Bio_Bio","ProjectCard","newDesc","desc","Card","elevation","projectName","commonjs_layers","CardAlbum","marginTop","components_ProjectCard_ProjectCard","ProjectsPane","components_CardAlbum_CardAlbum","App","components_BioPane_BioPane","components_ProjectsPane_ProjectsPane","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d2a202da.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Pane, Avatar, Heading } from 'evergreen-ui';\r\nimport { Link } from 'evergreen-ui/commonjs/typography';\r\nimport './Badge.css';\r\n\r\nfunction Badge(props) {\r\n    return (\r\n        <Pane className=\"badge-wrapper\">\r\n            <Pane>\r\n                <Avatar src={props.img} name={props.name} size={175} />\r\n            </Pane>\r\n            <Pane>\r\n                <Heading className=\"heading\" size={800} color=\"white\">{props.name}</Heading>\r\n            </Pane>\r\n            <Pane align=\"center\">\r\n                <p>{props.organizationRole}</p>\r\n                <p>{props.organization}</p>\r\n                <Link href=\"#\" color=\"green\" size={500}>{props.email}</Link>\r\n            </Pane>\r\n        </Pane>\r\n    );\r\n}\r\n\r\nexport default Badge;","import { Heading, Pane } from 'evergreen-ui';\r\nimport React from 'react';\r\nimport Badge from '../Badge/Badge';\r\nimport './Bio.css';\r\n\r\nfunction Bio(props) {\r\n\r\n    let newText = props.bio.split('\\\\n').map((item, i) => <p key={i}>{item}</p>);\r\n\r\n    return (\r\n        <Pane className=\"blue-bg\">\r\n            <Pane className=\"bio-wrapper\">\r\n                <Badge\r\n                    img=\"/IMG_1145.jpeg\"\r\n                    name=\"Ghanashyam V T\"\r\n                    email=\"gvt217@nyu.edu\"\r\n                    organizationRole=\"Student (MS in CS)\"\r\n                    organization=\"NYU Tandon School of Engineering\" />\r\n            </Pane>\r\n            <Pane className=\"bio-pane\">\r\n                <Heading className=\"heading\" size={600} color=\"white\">Bio:</Heading>\r\n                {newText}\r\n            </Pane>\r\n        </Pane>\r\n    );\r\n}\r\n\r\nexport default Bio;","import { Pane } from 'evergreen-ui';\r\nimport React from 'react';\r\nimport Bio from '../Bio/Bio';\r\nimport './BioPane.css';\r\n\r\nfunction BioPane() {\r\n    return (\r\n        <Pane className=\"bio-pane\">\r\n        <Bio bio=\"I'm a former Machine Learning Engineer (although I've worked full-stack throughout my career). \\n\r\n        My interests lie in Computer Vision (image-classification, image-segmentation), Generative Adversarial Networks, and Natural Language Processing.\\n\r\n        In my free time, I game and binge-watch anime.\"/>\r\n      </Pane>\r\n    );\r\n}\r\n\r\nexport default BioPane;","import { Card, Heading } from 'evergreen-ui';\r\nimport React from 'react';\r\nimport './ProjectCard.css';\r\nimport { Pane } from 'evergreen-ui/commonjs/layers';\r\n\r\nfunction ProjectCard(props) {\r\n    let newDesc = props.desc ? props.desc.split('\\\\n').map((item, i) => <p key={i}>{item}</p>): '';\r\n    return (\r\n        <Card elevation={2} className=\"card\">\r\n            <Heading size={700} className=\"project-name\">{props.projectName}</Heading>\r\n            <Pane className=\"short-desc\">{newDesc}</Pane>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default ProjectCard;","import React from 'react';\r\nimport { Pane } from 'evergreen-ui';\r\nimport ProjectCard from '../ProjectCard/ProjectCard';\r\nimport './CardAlbum.css';\r\n\r\nfunction CardAlbum() {\r\n    return (\r\n        <Pane className=\"album-wrapper\" marginTop={100}>\r\n            <ProjectCard projectName=\"AutoML\"\r\n                        desc=\"Automated Machine Learning for regression, classification, \r\n                            forecasting of numerical data and classification of images as well.\\n\r\n                            It uses a combination of scikit-learn, tensorflow and keras.\\n\r\n                            Each trained model can be deployed on automatically managed docker containers.\" />\r\n            <ProjectCard projectName=\"Gas Leak Detection\"\r\n                        desc=\"Detection of gas leaks using image classification via Convolutional Neural Networks on low-cost thermal cameras.\\n\r\n                            Data from the temperature sensor array is also used to help determine the type of gas being leaked.\" />\r\n            <ProjectCard projectName=\"Distributed Machine Learning(DMLN)\"\r\n                        desc=\"Detects audio and image anomalies in manufacturing industries with over 90% accuracy.\\n\r\n                            Allows users to remotely capture data from sensors, train classification models using them and finally deploy them to any remote location.\" />\r\n            <ProjectCard projectName=\"Analysis and Automated Mapping of Products to Categories in E-Commerce\" \r\n                        desc=\"Scraped and cleaned product to category mapping of multiple e-commerce websites.\\n\r\n                            Used the data to build an intelligent solution that maps new products automatically to categories based on information like brand and image.\" />\r\n            <ProjectCard projectName=\"Chatbot Builder\" \r\n                        desc=\"Uses Spacy, RASA and duckling to enable users to quickly and easily build chatbots via a simple UI.\\n\r\n                            The chatbot can also be deployed as an Alexa skill.\" />\r\n            <ProjectCard projectName=\"License Plate Detection using Image Segmentation\" \r\n                        desc=\"Performs image segmentation using DeepLab and then uses Tesseract to perform OCR\" />\r\n            <ProjectCard projectName=\"PokeGAN\" \r\n                        desc=\"A Generative Adversarial Network to generate images of new Pokemon using images of existing pokemon\"/>\r\n            <ProjectCard projectName=\"React Native App for DMLN\" \r\n                        desc=\"Built a React Native application for iOS and Android.\\n\r\n                            Allows users to capture and upload data.\\n\r\n                            Also enables the users to deploy the trained models and uses on-device hardware for inference.\" />\r\n            <ProjectCard projectName=\"Smart Water-Grid System using Blockchain\" \r\n                        desc=\"Used to determine leakage in water-grids.\\n\r\n                            Amount of water sent and received is recorded on the blockchain and tallied to detect the leaks.\" />\r\n            <ProjectCard projectName=\"Custom ERC-20 Token\" \r\n                        desc=\"An ERC-20 compliant cryptocurrency to serve as store credit for a medical service provider.\" />\r\n            <ProjectCard projectName=\"Document Verification using Blockchain\"\r\n                        desc=\"An application to store verified records of professionals for quick, easy and reliable background verification.\" />\r\n            <ProjectCard projectName=\"E-Commerce Inventory Hierarchy Visualization\" \r\n                        desc=\"Used d3.js to determine and visualize the hierarchy of the product inventory for an e-commerce company.\" />\r\n            <ProjectCard projectName=\"Crypto-Currency based Mutual Funds\" \r\n                        desc=\"Prototyped an applicationto generate cryptocurrencies based on stocks and other cryptocurrencies.\\n\r\n                            This includes rebalancing strategies for simple and reliable price variation.\" />\r\n            <ProjectCard projectName=\"Custom Character-Set Generation and OCR\" \r\n                        desc=\"Created an application that generates encrypted character-sets and trained the Tesseract OCR for reading them.\" />\r\n            <ProjectCard projectName=\"Personal Website\" \r\n                        desc=\"This website.\\n\r\n                            Built using React.js.\\n\r\n                            Powered by GitHub pages.\"/>\r\n            <ProjectCard projectName=\"Scraping and Analysis of Stock Data\" \r\n                        desc=\"Scraped user generated content about stocks on various forums and social media.\\n\r\n                            Performed sentiment analysis on the content and used it to predict the stock prices for the next day\" />\r\n            <ProjectCard projectName=\"Automated Task Extraction\" \r\n                        desc=\"Used OpenCV and Scikit-Image to determine the actions being performed by the user on the screen.\\n\r\n                            The collected data is then used to eventually suggest the fastest way of performing a certain task.\" />\r\n            <ProjectCard projectName=\"SocialSurvey\" \r\n                        desc=\"An organization-level application to send out surveys to customers, analyze the data and get service insights.\\n\r\n                            Includes various API integrations including LinkedIn, Facebook, Twitter and Zillow.\\n \" />\r\n        </Pane>\r\n    );\r\n}\r\n\r\nexport default CardAlbum;","import React from 'react';\r\nimport { Pane, Heading } from 'evergreen-ui';\r\nimport CardAlbum from '../CardAlbum/CardAlbum';\r\nimport './ProjectsPane.css';\r\n\r\nfunction ProjectsPane() {\r\n    return (\r\n        <Pane className=\"projects-pane\">\r\n            <Pane>\r\n                <Heading marginTop={50} size={900}>Projects</Heading>\r\n            </Pane>\r\n            <CardAlbum />\r\n        </Pane>\r\n    );\r\n}\r\n\r\nexport default ProjectsPane;","import { Pane } from 'evergreen-ui';\r\nimport React from 'react';\r\nimport './App.css';\r\nimport BioPane from './components/BioPane/BioPane';\r\nimport ProjectsPane from './components/ProjectsPane/ProjectsPane';\r\n\r\nfunction App() {\r\n  return (\r\n    <Pane className=\"app-wrapper\">\r\n      <BioPane />\r\n      <ProjectsPane />\r\n    </Pane>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}