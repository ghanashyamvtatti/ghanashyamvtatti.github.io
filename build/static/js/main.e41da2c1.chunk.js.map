{"version":3,"sources":["components/Badge/Badge.js","components/Bio/Bio.js","components/BioPane/BioPane.js","components/ProjectCard/ProjectCard.js","components/Firestore/Firestore.js","components/CardAlbum/CardAlbum.js","components/ProjectsPane/ProjectsPane.js","App.js","serviceWorker.js","index.js"],"names":["Badge","props","react_default","a","createElement","Pane","className","Avatar","src","img","name","size","Heading","color","align","organizationRole","organization","href","email","Bio","newText","bio","split","map","item","i","key","components_Badge_Badge","newTab","URL","window","open","BioPane","components_Bio_Bio","index_esm","onClick","ProjectCard","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isShown","_this2","newDesc","desc","longDesc","commonjs_layers","Card","elevation","hoverElevation","activeElevation","borderRadius","setState","projectName","Dialog","title","onCloseComplete","hasFooter","Component","firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","CardAlbum","projects","currentComponent","projectList","firestore","collection","get","then","result","forEach","doc","push","data","marginTop","components_ProjectCard_ProjectCard","shortDesc","link","ProjectsPane","components_CardAlbum_CardAlbum","App","components_BioPane_BioPane","components_ProjectsPane_ProjectsPane","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e41da2c1.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Pane, Avatar, Heading } from 'evergreen-ui';\r\nimport './Badge.css';\r\n\r\nfunction Badge(props) {\r\n    return (\r\n        <Pane className=\"badge-wrapper\">\r\n            <Pane>\r\n                <Avatar src={props.img} name={props.name} size={175} />\r\n            </Pane>\r\n            <Pane>\r\n                <Heading className=\"heading\" size={800} color=\"white\">{props.name}</Heading>\r\n            </Pane>\r\n            <Pane align=\"center\">\r\n                <p>{props.organizationRole}</p>\r\n                <p>{props.organization}</p>\r\n                <a href=\"#\" className=\"link\">{props.email}</a>\r\n            </Pane>\r\n        </Pane>\r\n    );\r\n}\r\n\r\nexport default Badge;","import { Heading, Pane } from 'evergreen-ui';\r\nimport React from 'react';\r\nimport Badge from '../Badge/Badge';\r\nimport './Bio.css';\r\n\r\nfunction Bio(props) {\r\n\r\n    let newText = props.bio.split('\\\\n').map((item, i) => <p className=\"paragraph\" key={i}>{item}</p>);\r\n\r\n    return (\r\n        <Pane className=\"blue-bg\">\r\n            <Pane className=\"bio-wrapper\">\r\n                <Badge\r\n                    img=\"/IMG_1145.jpeg\"\r\n                    name=\"Ghanashyam V Tatti\"\r\n                    email=\"gvt217@nyu.edu\"\r\n                    organizationRole=\"Student (MS in CS)\"\r\n                    organization=\"NYU Tandon School of Engineering\" />\r\n            </Pane>\r\n            <Pane className=\"bio-pane\">\r\n                <Heading className=\"heading\" size={500} color=\"white\">Biography:</Heading>\r\n                {newText}\r\n            </Pane>\r\n        </Pane>\r\n    );\r\n}\r\n\r\nexport default Bio;","import { Pane } from 'evergreen-ui';\r\nimport React from 'react';\r\nimport Bio from '../Bio/Bio';\r\nimport './BioPane.css';\r\nimport { FaGithubAlt, FaLinkedinIn, FaTwitter } from \"react-icons/fa\";\r\n\r\nfunction newTab(URL) {\r\n  window.open(URL, '_blank');\r\n}\r\n\r\nfunction BioPane() {\r\n    return (\r\n        <Pane className=\"bio-pane\">\r\n        <Bio bio=\"I'm a former Machine Learning Engineer (although I've worked full-stack throughout my career). \\n\r\n        My interests lie in Computer Vision (image-classification, image-segmentation), Generative Adversarial Networks, and Natural Language Processing.\"/>\r\n        <Pane align=\"center\">\r\n          <FaGithubAlt size=\"2em\" className=\"social-media\" onClick={() => newTab(\"https://github.com/ghanashyamvtatti\")}/>\r\n          <FaLinkedinIn size=\"2em\" className=\"social-media\" onClick={() => newTab(\"https://www.linkedin.com/in/ghanashyam-vt\")}/>\r\n          <FaTwitter size=\"2em\" className=\"social-media\" onClick={() => newTab(\"https://twitter.com/ghanashyamvt\")}/>\r\n        </Pane>\r\n      </Pane>\r\n    );//\r\n}\r\n\r\nexport default BioPane;","import { Card, Heading, Dialog } from 'evergreen-ui';\r\nimport React, { Component } from 'react';\r\nimport './ProjectCard.css';\r\nimport { Pane } from 'evergreen-ui/commonjs/layers';\r\n\r\nclass ProjectCard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { isShown: false }\r\n    }\r\n\r\n    render() {\r\n        let newDesc = this.props.desc ? this.props.desc.split('\\\\n').map((item, i) => <p key={i}>{item}</p>) : '';\r\n        let longDesc = this.props.longDesc ? this.props.longDesc.split('\\\\n').map((item, i) => <p key={i}>{item}</p>) : '';\r\n        return (\r\n            <Pane>\r\n                <Card\r\n                    elevation={1}\r\n                    hoverElevation={3}\r\n                    activeElevation={3}\r\n                    className=\"card\"\r\n                    borderRadius={10}\r\n                    onClick={() =>  this.setState({ isShown: true })}>\r\n                    <Heading size={600} className=\"project-name\">{this.props.projectName}</Heading>\r\n                    <Pane className=\"short-desc\">{newDesc}</Pane>\r\n                </Card>\r\n                <Dialog\r\n                    isShown={this.state.isShown}\r\n                    title={this.props.projectName}\r\n                    onCloseComplete={() => this.setState({ isShown: false })}\r\n                    hasFooter={false}>\r\n                    {longDesc || newDesc}\r\n                </Dialog>\r\n            </Pane>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default ProjectCard;","import firebase from 'firebase';\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n    apiKey: process.env.REACT_APP_API_KEY,\r\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\r\n    projectId: process.env.REACT_APP_PROJECT_ID,\r\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\r\n    appId: process.env.REACT_APP_APP_ID,\r\n    measurementId: process.env.REACT_APP_MEASUREMENT_ID\r\n};\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\nfirebase.analytics();\r\n\r\nexport default firebase;","import React, { Component } from 'react';\r\nimport { Pane } from 'evergreen-ui';\r\nimport ProjectCard from '../ProjectCard/ProjectCard';\r\nimport './CardAlbum.css';\r\nimport firebase from '../Firestore/Firestore';\r\n\r\nclass CardAlbum extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { projects: [] }\r\n    }\r\n\r\n    componentDidMount() {\r\n        let currentComponent = this;\r\n        let projectList = []\r\n        const db = firebase.firestore();\r\n        db.collection(\"projects\").get().then(function(result) {\r\n            result.forEach((doc) => {\r\n                projectList.push(doc.data());\r\n            });\r\n            currentComponent.setState({ projects: projectList});\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <Pane className=\"album-wrapper\" marginTop={50}>\r\n            {this.state.projects.map(\r\n                function(doc) {\r\n                    return (\r\n                    <ProjectCard key={doc.name} projectName={doc.name} desc={doc.shortDesc} longDesc={doc.longDesc} link={doc.link} />\r\n                    )\r\n                }\r\n            )}\r\n        </Pane>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default CardAlbum;","import React from 'react';\r\nimport { Pane, Heading } from 'evergreen-ui';\r\nimport CardAlbum from '../CardAlbum/CardAlbum';\r\nimport './ProjectsPane.css';\r\n\r\nfunction ProjectsPane() {\r\n    return (\r\n        <Pane className=\"projects-pane\" >\r\n            <Pane>\r\n                <Heading marginTop={50} size={700}>Projects</Heading>\r\n            </Pane>\r\n            <CardAlbum />\r\n        </Pane>\r\n    );\r\n}\r\n\r\nexport default ProjectsPane;","import { Pane } from 'evergreen-ui';\r\nimport React from 'react';\r\nimport './App.css';\r\nimport BioPane from './components/BioPane/BioPane';\r\nimport ProjectsPane from './components/ProjectsPane/ProjectsPane';\r\n\r\nfunction App() {  \r\n  return (\r\n    <Pane className=\"app-wrapper\">\r\n      <BioPane />\r\n      <ProjectsPane />\r\n    </Pane>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}